diff --git a/driver/linux/main.c b/driver/linux/main.c
index a75969b..07d0bd8 100644
--- a/driver/linux/main.c
+++ b/driver/linux/main.c
@@ -756,6 +756,26 @@ static bool __init sgx_page_cache_init(void)
 	return true;
 }
 
+static int enabled_fsgsbase = 0;
+
+static
+void fsgsbase_enable(void* unused) {
+    u64 cr4;
+
+    cr4 =  __read_cr4();
+    cr4 |= X86_CR4_FSGSBASE;
+    asm volatile("mov %0,%%cr4": "+r" (cr4));
+}
+
+static
+void fsgsbase_disable(void* unused) {
+    u64 cr4;
+
+    cr4 =  __read_cr4();
+    cr4 &= ~X86_CR4_FSGSBASE;
+    asm volatile("mov %0,%%cr4": "+r" (cr4));
+}
+
 static int __init sgx_init(void)
 {
 	int ret;
@@ -788,6 +808,14 @@ static int __init sgx_init(void)
 
 	pr_info(DRV_DESCRIPTION " v" DRV_VERSION "\n");
 
+	if (boot_cpu_has(X86_FEATURE_FSGSBASE)) {
+		if (!(__read_cr4() & X86_CR4_FSGSBASE)) {
+			on_each_cpu(fsgsbase_enable, 0, 1);
+			enabled_fsgsbase = 1;
+			pr_emerg("intel_sgx: fsgsbase extension has been enabled.\nPlease be aware that this is known to introduce a local vulnerability\nand is meant to be used only in development environments.\nFor production systems, use a kernel version that supports this extension (mainline kernel >=5.9)\n");
+		}
+	}
+
 	return 0;
 
 err_kthread:
@@ -811,5 +839,9 @@ static void __exit sgx_exit(void)
 		vfree(sgx_epc_sections[i].pages);
 		memunmap(sgx_epc_sections[i].virt_addr);
 	}
+	if (enabled_fsgsbase) {
+		on_each_cpu(fsgsbase_disable, 0, 1);
+		pr_info("intel_sgx: disabled fsgsbase extension\n");
+	}
 }
 module_exit(sgx_exit);
diff --git a/driver/linux/sgx.h b/driver/linux/sgx.h
index a25137a..49cdcae 100644
--- a/driver/linux/sgx.h
+++ b/driver/linux/sgx.h
@@ -19,6 +19,8 @@
 #define SGX_NR_LOW_PAGES		32
 #define SGX_NR_HIGH_PAGES		64
 
+#define PATCH_FSGSBASE 1
+
 /* Pages, which are being tracked by the page reclaimer. */
 #define SGX_EPC_PAGE_RECLAIMER_TRACKED	BIT(0)
 
