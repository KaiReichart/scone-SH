diff --git a/sgx.h b/sgx.h
index 62c19da..88ff110 100644
--- a/sgx.h
+++ b/sgx.h
@@ -86,6 +86,8 @@
     #define MSR_IA32_SGXLEPUBKEYHASH3	0x0000008F
 #endif
 
+#define PATCH_FSGSBASE 1
+
 struct sgx_epc_page {
 	resource_size_t	pa;
 	struct list_head list;
diff --git a/sgx_main.c b/sgx_main.c
index 4ff4e2b..6a6acb8 100644
--- a/sgx_main.c
+++ b/sgx_main.c
@@ -195,6 +195,26 @@ static void sgx_reset_pubkey_hash(void *failed)
 
 static SIMPLE_DEV_PM_OPS(sgx_drv_pm, sgx_pm_suspend, NULL);
 
+static int enabled_fsgsbase = 0;
+
+static
+void fsgsbase_enable(void* unused) {
+    u64 cr4;
+
+    cr4 =  __read_cr4();
+    cr4 |= X86_CR4_FSGSBASE;
+    asm volatile("mov %0,%%cr4": "+r" (cr4));
+}
+
+static
+void fsgsbase_disable(void* unused) {
+    u64 cr4;
+
+    cr4 =  __read_cr4();
+    cr4 &= ~X86_CR4_FSGSBASE;
+    asm volatile("mov %0,%%cr4": "+r" (cr4));
+}
+
 static int sgx_dev_init(struct device *parent)
 {
 	unsigned int eax, ebx, ecx, edx;
@@ -286,6 +306,14 @@ static int sgx_dev_init(struct device *parent)
 		pr_info("intel_sgx:  can not reset SGX LE public key hash MSRs\n");
 	}
 
+	if (boot_cpu_has(X86_FEATURE_FSGSBASE)) {
+		if (!(__read_cr4() & X86_CR4_FSGSBASE)) {
+			on_each_cpu(fsgsbase_enable, 0, 1);
+			enabled_fsgsbase = 1;
+			pr_emerg("intel_sgx: fsgsbase extension has been enabled.\nPlease be aware that this is known to introduce a local vulnerability\nand is meant to be used only in development environments.\nFor production systems, use a kernel version that supports this extension (mainline kernel >=5.9)");
+		}
+	}
+
 	return 0;
 out_workqueue:
 	destroy_workqueue(sgx_add_page_wq);
@@ -387,6 +415,8 @@ static struct platform_driver sgx_drv = {
 };
 
 static struct platform_device *pdev;
+void fsgsbase_enable(void*);
+void fsgsbase_disable(void*);
 int init_sgx_module(void)
 {
 	platform_driver_register(&sgx_drv);
@@ -401,6 +431,10 @@ void cleanup_sgx_module(void)
 	dev_set_uevent_suppress(&pdev->dev, true);
 	platform_device_unregister(pdev);
 	platform_driver_unregister(&sgx_drv);
+	if (enabled_fsgsbase) {
+		on_each_cpu(fsgsbase_disable, 0, 1);
+		pr_info("intel_sgx: disabled fsgsbase extension");
+	}
 }
 
 module_init(init_sgx_module);
