diff --git a/driver/linux/driver.h b/driver/linux/driver.h
index 4024f48..7794508 100644
--- a/driver/linux/driver.h
+++ b/driver/linux/driver.h
@@ -27,4 +27,6 @@ long sgx_ioctl(struct file *filep, unsigned int cmd, unsigned long arg);
 int sgx_drv_init(void);
 int sgx_drv_exit(void);

+#define PATCH_METRICS 1
+
 #endif /* __ARCH_X86_SGX_DRIVER_H__ */
diff --git a/driver/linux/encl.c b/driver/linux/encl.c
index b9746c5..ed572e1 100644
--- a/driver/linux/encl.c
+++ b/driver/linux/encl.c
@@ -14,6 +14,18 @@
 #include "dcap.h"
 #include <linux/version.h>

+#include <linux/moduleparam.h>
+
+extern unsigned int sgx_nr_enclaves;
+static unsigned int sgx_nr_low_pages = SGX_NR_LOW_PAGES;
+static unsigned int sgx_nr_high_pages = SGX_NR_HIGH_PAGES;
+static unsigned int sgx_loaded_back = 0;
+static unsigned int sgx_nr_marked_old = 0;
+
+module_param(sgx_nr_low_pages, uint, 0440);
+module_param(sgx_nr_high_pages, uint, 0440);
+module_param(sgx_loaded_back, uint, 0440);
+module_param(sgx_nr_marked_old, uint, 0440);

 /*
  * ELDU: Load an EPC page as unblocked. For more info, see "OS Management of EPC
@@ -58,6 +70,8 @@ static int __sgx_encl_eldu(struct sgx_encl_page *encl_page,
 		ret = -EFAULT;
 	}

+	sgx_loaded_back++;
+
 	kunmap_atomic((void *)(unsigned long)(pginfo.metadata - b.pcmd_offset));
 	kunmap_atomic((void *)(unsigned long)pginfo.contents);

@@ -474,6 +488,10 @@ void sgx_encl_release(struct kref *ref)
 	unsigned long index;
 #endif

+	if (encl->flags & SGX_ENCL_CREATED)
+		sgx_nr_enclaves--;
+
+
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 20, 0))
 	radix_tree_for_each_slot(slot, &encl->page_tree, &iter, 0) {
 		entry = *slot;
@@ -748,6 +766,7 @@ static int sgx_encl_test_and_clear_young_cb(pte_t *ptep,
 	ret = pte_young(*ptep);
 	if (ret) {
 		pte = pte_mkold(*ptep);
+		sgx_nr_marked_old++;
 		set_pte_at((struct mm_struct *)data, addr, ptep, pte);
 	}

diff --git a/driver/linux/ioctl.c b/driver/linux/ioctl.c
index e8aa47a..3d3db8b 100644
--- a/driver/linux/ioctl.c
+++ b/driver/linux/ioctl.c
@@ -17,6 +17,14 @@
 #include "encls.h"

 #include <linux/version.h>
+#include <linux/moduleparam.h>
+
+unsigned int sgx_init_enclaves = 0;
+unsigned int sgx_nr_enclaves = 0;
+unsigned int sgx_nr_added_pages = 0;
+module_param(sgx_init_enclaves, uint, 0440);
+module_param(sgx_nr_enclaves, uint, 0440);
+module_param(sgx_nr_added_pages, uint, 0440);


 static struct sgx_va_page *sgx_encl_grow(struct sgx_encl *encl)
@@ -117,6 +125,7 @@ static int sgx_encl_create(struct sgx_encl *encl, struct sgx_secs *secs)

 	/* Set only after completion, as encl->lock has not been taken. */
 	set_bit(SGX_ENCL_CREATED, &encl->flags);
+	sgx_nr_enclaves++;

 	return 0;

@@ -261,6 +270,7 @@ static int __sgx_encl_add_page(struct sgx_encl *encl,

 	kunmap_atomic((void *)pginfo.contents);
 	put_page(src_page);
+    if (ret == 0) sgx_nr_added_pages++;

 	return ret ? -EIO : 0;
 }
@@ -603,6 +613,7 @@ static int sgx_encl_init(struct sgx_encl *encl, struct sgx_sigstruct *sigstruct,
 		ret = -EPERM;
 	} else {
 		set_bit(SGX_ENCL_INITIALIZED, &encl->flags);
+		sgx_init_enclaves++;
 	}

 err_out:
diff --git a/driver/linux/main.c b/driver/linux/main.c
index a75969b..d2af993 100644
--- a/driver/linux/main.c
+++ b/driver/linux/main.c
@@ -1,6 +1,7 @@
 // SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 /*  Copyright(c) 2016-21 Intel Corporation. */

+#include <linux/moduleparam.h>
 #include <linux/freezer.h>
 #include <linux/highmem.h>
 #include <linux/kthread.h>
@@ -39,6 +40,16 @@ static LIST_HEAD(sgx_active_page_list);

 static DEFINE_SPINLOCK(sgx_reclaimer_lock);

+static unsigned int sgx_nr_total_epc_pages = 0;
+static unsigned int sgx_nr_alloc_pages = 0;
+static unsigned int sgx_nr_reclaimed = 0;
+static unsigned int sgx_nr_evicted = 0;
+module_param(sgx_nr_epc_sections, int, 0440);
+module_param(sgx_nr_total_epc_pages, uint, 0440);
+module_param(sgx_nr_alloc_pages, uint, 0440);
+module_param(sgx_nr_reclaimed, uint, 0440);
+module_param(sgx_nr_evicted, uint, 0440);
+
 /*
  * Reset dirty EPC pages to uninitialized state. Laundry can be left with SECS
  * pages whose child pages blocked EREMOVE.
@@ -302,6 +313,7 @@ static void sgx_reclaimer_write(struct sgx_epc_page *epc_page,
 		if (ret)
 			goto out;

+		sgx_nr_evicted++;  // races are acceptable..
 		sgx_encl_ewb(encl->secs.epc_page, &secs_backing);

 		sgx_free_epc_page(encl->secs.epc_page);
@@ -373,6 +385,7 @@ static void sgx_reclaim_pages(void)

 		mutex_lock(&encl_page->encl->lock);
 		encl_page->desc |= SGX_ENCL_PAGE_BEING_RECLAIMED;
+		sgx_nr_reclaimed++;
 		mutex_unlock(&encl_page->encl->lock);
 		continue;

@@ -423,6 +436,18 @@ static unsigned long sgx_nr_free_pages(void)
 	return cnt;
 }

+static int get_sgx_nr_free_pages(char *buffer, const struct kernel_param *kp)
+{
+	return sprintf(buffer, "%lu\n", sgx_nr_free_pages());
+}
+
+static struct kernel_param_ops param_ops_sgx_nr_free_pages = {
+	.get = get_sgx_nr_free_pages,
+};
+
+module_param_cb(sgx_nr_free_pages, &param_ops_sgx_nr_free_pages, NULL, 0440);
+
+
 static bool sgx_should_reclaim(unsigned long watermark)
 {
 	return sgx_nr_free_pages() < watermark &&
@@ -623,6 +648,7 @@ struct sgx_epc_page *sgx_alloc_epc_page(void *owner, bool reclaim)
 	for ( ; ; ) {
 		page = __sgx_alloc_epc_page();
 		if (!IS_ERR(page)) {
+			sgx_nr_alloc_pages++; // ignore races..
 			page->owner = owner;
 			break;
 		}
@@ -746,6 +772,7 @@ static bool __init sgx_page_cache_init(void)
 		}

 		sgx_nr_epc_sections++;
+		sgx_nr_total_epc_pages += (size / PAGE_SIZE);
 	}

 	if (!sgx_nr_epc_sections) {
diff --git a/driver/linux/show_values.sh b/driver/linux/show_values.sh
new file mode 100755
index 0000000..af9e2d8
--- /dev/null
+++ b/driver/linux/show_values.sh
@@ -0,0 +1,23 @@
+#!/bin/bash
+#
+# (C) Christof Fetzer, 2017
+
+METRICS="sgx_nr_total_epc_pages \
+    sgx_nr_free_pages \
+    sgx_nr_low_pages \
+    sgx_nr_high_pages \
+    sgx_nr_marked_old \
+    sgx_nr_evicted \
+    sgx_nr_alloc_pages \
+    sgx_nr_reclaimed \
+    sgx_init_enclaves \
+    sgx_nr_added_pages \
+    sgx_nr_enclaves \
+    sgx_loaded_back \
+    sgx_nr_epc_sections \
+    "
+MODPATH="/sys/module/intel_sgx/parameters/"
+
+for metric in $METRICS ; do
+    echo "$metric= `cat $MODPATH/$metric`"
+done
--
2.25.1

