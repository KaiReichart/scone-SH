From 911a08cd6e96eba66a629ba80871c6b0c5c830f0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?F=C3=A1bio=20Silva?= <fabio@scontain.com>
Date: Wed, 2 Sep 2020 00:45:58 -0300
Subject: [PATCH] Add metrics extension

---
 driver/linux/driver.h       |  2 ++
 driver/linux/encl.c         | 18 ++++++++++++++++++
 driver/linux/ioctl.c        | 12 ++++++++++++
 driver/linux/main.c         | 26 ++++++++++++++++++++++++++
 driver/linux/show_values.sh | 23 +++++++++++++++++++++++
 5 files changed, 81 insertions(+)
 create mode 100755 driver/linux/show_values.sh

diff --git a/driver/linux/driver.h b/driver/linux/driver.h
index c90e132..c47fd79 100644
--- a/driver/linux/driver.h
+++ b/driver/linux/driver.h
@@ -12,6 +12,8 @@
 #include "uapi/asm/sgx_oot.h"
 #include "sgx.h"
 
+#define PATCH_METRICS 1
+
 #define SGX_EINIT_SPIN_COUNT	20
 #define SGX_EINIT_SLEEP_COUNT	50
 #define SGX_EINIT_SLEEP_TIME	20
diff --git a/driver/linux/encl.c b/driver/linux/encl.c
index ebac232..02c14b0 100644
--- a/driver/linux/encl.c
+++ b/driver/linux/encl.c
@@ -14,6 +14,18 @@
 #include "dcap.h"
 
 #include <linux/version.h>
+#include <linux/moduleparam.h>
+
+extern unsigned int sgx_nr_enclaves;
+static unsigned int sgx_nr_low_pages = SGX_NR_LOW_PAGES;
+static unsigned int sgx_nr_high_pages = SGX_NR_HIGH_PAGES;
+static unsigned int sgx_loaded_back = 0;
+static unsigned int sgx_nr_marked_old = 0;
+
+module_param(sgx_nr_low_pages, uint, 0440);
+module_param(sgx_nr_high_pages, uint, 0440);
+module_param(sgx_loaded_back, uint, 0440);
+module_param(sgx_nr_marked_old, uint, 0440);
 
 static int __sgx_encl_eldu(struct sgx_encl_page *encl_page,
 			   struct sgx_epc_page *epc_page,
@@ -55,6 +67,8 @@ static int __sgx_encl_eldu(struct sgx_encl_page *encl_page,
 		ret = -EFAULT;
 	}
 
+	sgx_loaded_back++;
+
 	kunmap_atomic((void *)(unsigned long)(pginfo.metadata - b.pcmd_offset));
 	kunmap_atomic((void *)(unsigned long)pginfo.contents);
 
@@ -616,6 +630,9 @@ void sgx_encl_release(struct kref *ref)
 {
 	struct sgx_encl *encl = container_of(ref, struct sgx_encl, refcount);
 
+	if (atomic_read(&encl->flags) & SGX_ENCL_CREATED)
+		sgx_nr_enclaves--;
+
 	sgx_encl_destroy(encl);
 
 	if (encl->backing)
@@ -716,6 +733,7 @@ static int sgx_encl_test_and_clear_young_cb(pte_t *ptep,
 	ret = pte_young(*ptep);
 	if (ret) {
 		pte = pte_mkold(*ptep);
+		sgx_nr_marked_old++;
 		set_pte_at((struct mm_struct *)data, addr, ptep, pte);
 	}
 
diff --git a/driver/linux/ioctl.c b/driver/linux/ioctl.c
index 1ca7612..ffaabb8 100644
--- a/driver/linux/ioctl.c
+++ b/driver/linux/ioctl.c
@@ -18,6 +18,14 @@
 
 #include <linux/version.h>
 #include "sgx_wl.h"
+#include <linux/moduleparam.h>
+
+unsigned int sgx_init_enclaves = 0;
+unsigned int sgx_nr_enclaves = 0;
+unsigned int sgx_nr_added_pages = 0;
+module_param(sgx_init_enclaves, uint, 0440);
+module_param(sgx_nr_enclaves, uint, 0440);
+module_param(sgx_nr_added_pages, uint, 0440);
 
 /* A per-cpu cache for the last known values of IA32_SGXLEPUBKEYHASHx MSRs. */
 static DEFINE_PER_CPU(u64 [4], sgx_lepubkeyhash_cache);
@@ -190,6 +198,7 @@ static int sgx_encl_create(struct sgx_encl *encl, struct sgx_secs *secs)
 	 */
 	atomic_or(SGX_ENCL_CREATED, &encl->flags);
 
+	sgx_nr_enclaves++;
 	return 0;
 
 err_out:
@@ -431,6 +440,8 @@ static int sgx_encl_add_page(struct sgx_encl *encl, unsigned long src,
 	if (ret)
 		goto err_out;
 
+	sgx_nr_added_pages++;
+
 	/*
 	 * Complete the "add" before doing the "extend" so that the "add"
 	 * isn't in a half-baked state in the extremely unlikely scenario the
@@ -709,6 +720,7 @@ static int sgx_encl_init(struct sgx_encl *encl, struct sgx_sigstruct *sigstruct,
 		ret = -EPERM;
 	} else {
 		atomic_or(SGX_ENCL_INITIALIZED, &encl->flags);
+		sgx_init_enclaves++;
 	}
 
 err_out:
diff --git a/driver/linux/main.c b/driver/linux/main.c
index bd0c821..758b173 100644
--- a/driver/linux/main.c
+++ b/driver/linux/main.c
@@ -16,6 +16,7 @@
 #include <linux/module.h>
 #include "version.h"
 #include "dcap.h"
+#include <linux/moduleparam.h>
 #ifndef MSR_IA32_FEAT_CTL
 #define MSR_IA32_FEAT_CTL MSR_IA32_FEATURE_CONTROL
 #endif
@@ -30,6 +31,16 @@ static DECLARE_WAIT_QUEUE_HEAD(ksgxswapd_waitq);
 static LIST_HEAD(sgx_active_page_list);
 static DEFINE_SPINLOCK(sgx_active_page_list_lock);
 
+static unsigned int sgx_nr_total_epc_pages = 0;
+static unsigned int sgx_nr_alloc_pages = 0;
+static unsigned int sgx_nr_reclaimed = 0;
+static unsigned int sgx_nr_evicted = 0;
+module_param(sgx_nr_epc_sections, int, 0440);
+module_param(sgx_nr_total_epc_pages, uint, 0440);
+module_param(sgx_nr_alloc_pages, uint, 0440);
+module_param(sgx_nr_reclaimed, uint, 0440);
+module_param(sgx_nr_evicted, uint, 0440);
+
 /**
  * sgx_mark_page_reclaimable() - Mark a page as reclaimable
  * @page:	EPC page
@@ -319,6 +330,7 @@ static void sgx_reclaimer_write(struct sgx_epc_page *epc_page,
 			if (ret)
 				goto out;
 
+			sgx_nr_evicted++;  // races are acceptable..
 			sgx_encl_ewb(encl->secs.epc_page, &secs_backing);
 
 			sgx_free_epc_page(encl->secs.epc_page);
@@ -384,6 +396,7 @@ static void sgx_reclaim_pages(void)
 
 		mutex_lock(&encl_page->encl->lock);
 		encl_page->desc |= SGX_ENCL_PAGE_RECLAIMED;
+		sgx_nr_reclaimed++;
 		mutex_unlock(&encl_page->encl->lock);
 		continue;
 
@@ -462,6 +475,17 @@ static unsigned long sgx_nr_free_pages(void)
 	return cnt;
 }
 
+static int get_sgx_nr_free_pages(char *buffer, const struct kernel_param *kp)
+{
+	return sprintf(buffer, "%lu\n", sgx_nr_free_pages());
+}
+
+static struct kernel_param_ops param_ops_sgx_nr_free_pages = {
+	.get = get_sgx_nr_free_pages,
+};
+
+module_param_cb(sgx_nr_free_pages, &param_ops_sgx_nr_free_pages, NULL, 0440);
+
 static bool sgx_should_reclaim(unsigned long watermark)
 {
 	return sgx_nr_free_pages() < watermark &&
@@ -642,6 +666,7 @@ struct sgx_epc_page *sgx_alloc_epc_page(void *owner, bool reclaim)
 		schedule();
 	}
 
+	sgx_nr_alloc_pages++; // ignore races..
 	if (sgx_should_reclaim(SGX_NR_LOW_PAGES))
 		wake_up(&ksgxswapd_waitq);
 
@@ -780,6 +805,7 @@ static bool __init sgx_page_cache_init(void)
 		}
 
 		sgx_nr_epc_sections++;
+		sgx_nr_total_epc_pages += (size / PAGE_SIZE);
 	}
 
 	if (!sgx_nr_epc_sections) {
diff --git a/driver/linux/show_values.sh b/driver/linux/show_values.sh
new file mode 100755
index 0000000..af9e2d8
--- /dev/null
+++ b/driver/linux/show_values.sh
@@ -0,0 +1,23 @@
+#!/bin/bash
+#
+# (C) Christof Fetzer, 2017
+
+METRICS="sgx_nr_total_epc_pages \
+    sgx_nr_free_pages \
+    sgx_nr_low_pages \
+    sgx_nr_high_pages \
+    sgx_nr_marked_old \
+    sgx_nr_evicted \
+    sgx_nr_alloc_pages \
+    sgx_nr_reclaimed \
+    sgx_init_enclaves \
+    sgx_nr_added_pages \
+    sgx_nr_enclaves \
+    sgx_loaded_back \
+    sgx_nr_epc_sections \
+    "
+MODPATH="/sys/module/intel_sgx/parameters/"
+
+for metric in $METRICS ; do
+    echo "$metric= `cat $MODPATH/$metric`"
+done
-- 
2.25.1

